<?php

declare(strict_types=1);

namespace {{invokerPackage}};

use ADS\Util\ArrayUtil;
{{#models}}{{#model}}use {{importPath}};
{{/model}}{{/models}}use Elastic\OpenApi\Codegen\AbstractClient;

{{#clientClassQualifier}}{{{.}}} {{/clientClassQualifier}}class {{clientClass}} extends AbstractClient
{{=<% %>=}}{<%#apiInfo%><%={{ }}=%>{{#apis}}{{#operations}}{{#operation}}
    /**
{{#summary}}
     * {{.}}
     *
{{/summary}}
{{#notes}}
     * {{.}}
     *
{{/notes}}
{{#externalDocs}}
     * Documentation: {{url}}
     *
{{/externalDocs}}{{#pathParams}}
     * @param {{dataType}}{{#isListContainer}}<{{baseType}}>{{/isListContainer}}{{^required}}|null{{/required}} ${{paramName}}{{/pathParams}}
     *
    * @return {{^responses.0.schema}}mixed{{/responses.0.schema}}{{#responses.0.schema}}{{#responses.0.isListContainer}}array<{{responses.0.baseType}}>{{/responses.0.isListContainer}}{{#responses.0.primitiveType}}{{^responses.0.isListContainer}}{{responses.0.dataType}}{{#responses.0.isFreeFormObject}}<mixed>{{/responses.0.isFreeFormObject}}{{/responses.0.isListContainer}}{{/responses.0.primitiveType}}{{^responses.0.isListContainer}}{{^responses.0.primitiveType}}{{responses.0.baseType}}{{/responses.0.primitiveType}}{{/responses.0.isListContainer}}{{/responses.0.schema}}
     */
    {{vendorExtensions.x-operation-scope}} function {{operationId}}({{#pathParams}}
        {{dataType}} ${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}{{/pathParams}}{{#pathParams.0}}{{^queryParams.0}}{{^bodyParams.0}}{{^formParams.0}}
    {{/formParams.0}}{{/bodyParams.0}}{{/queryParams.0}}{{/pathParams.0}}{{#queryParams.0}}{{#pathParams.0}},{{/pathParams.0}}
        ?{{operationIdCamelCase}}Query $query = null{{^bodyParams.0}}{{^formParams.0}}
    {{/formParams.0}}{{/bodyParams.0}}{{/queryParams.0}}{{#bodyParams.0}}{{#pathParams.0}},{{/pathParams.0}}{{#queryParams.0}}{{^pathParams.0}},{{/pathParams.0}}{{/queryParams.0}}
        {{^bodyParams.0.required}}?{{/bodyParams.0.required}}{{bodyParams.0.baseType}} $body{{^bodyParams.0.required}} = null{{/bodyParams.0.required}}{{^formParams.0}}
    {{/formParams.0}}{{/bodyParams.0}}{{#formParams.0}}{{#pathParams.0}},{{/pathParams.0}}{{#queryParams.0}}{{^pathParams.0}},{{/pathParams.0}}{{/queryParams.0}}{{#bodyParams.0}}{{^queryParams.0}}{{^pathParams.0}},{{/pathParams.0}}{{/queryParams.0}}{{/bodyParams.0}}
        {{^formParams.0.required}}?{{/formParams.0.required}}{{formParams.0.baseType}} $form{{^formParams.0.required}} = null{{/formParams.0.required}}
    {{/formParams.0}}){{#responses.0.schema}}: {{/responses.0.schema}}{{#responses.0.primitiveType}}{{responses.0.dataType}}{{/responses.0.primitiveType}}{{#responses.0.isListContainer}}{{^responses.0.primitiveType}}{{responses.0.dataType}}{{/responses.0.primitiveType}}{{/responses.0.isListContainer}}{{^responses.0.isListContainer}}{{^responses.0.primitiveType}}{{responses.0.baseType}}{{/responses.0.primitiveType}}{{/responses.0.isListContainer}}{{^pathParams.0}}{{^queryParams.0}}{{^bodyParams.0}}{{^formParams.0}}
   {{/formParams.0}}{{/bodyParams.0}}{{/queryParams.0}}{{/pathParams.0}} {
        {{#pathParams.0}}
        $path = [
            {{#pathParams}}
            '{{baseName}}' => ${{paramName}},
            {{/pathParams}}
        ];

        {{/pathParams.0}}
        $response = $this->performRequest(
            $this
                ->endpoint('{{classname}}'){{#pathParams.0}}{{^queryParams.0}}
                ->setParams($path){{/queryParams.0}}{{/pathParams.0}}{{^pathParams.0}}{{#queryParams.0}}
                ->setParams($query ? $query->toArray() : []){{/queryParams.0}}{{/pathParams.0}}{{#pathParams.0}}{{#queryParams.0}}
                ->setParams($path + ($query ? $query->toArray() : [])){{/queryParams.0}}{{/pathParams.0}}{{#bodyParams.0}}
                ->setBody({{^bodyParams.0.required}}$body !== null ? {{/bodyParams.0.required}}{{#bodyParams.0.isPrimitiveType}}{{^bodyParams.0.isFreeFormObject}}[]{{/bodyParams.0.isFreeFormObject}}{{/bodyParams.0.isPrimitiveType}}{{#bodyParams.0.isFreeFormObject}}(array) $body{{/bodyParams.0.isFreeFormObject}}{{^bodyParams.0.isFreeFormObject}}{{^bodyParams.0.isPrimitiveType}}$body->toArray(){{/bodyParams.0.isPrimitiveType}}{{/bodyParams.0.isFreeFormObject}}{{^bodyParams.0.required}} : []{{/bodyParams.0.required}}){{/bodyParams.0}}{{#formParams.0}}
                ->setFormData({{#formParams.0.required}}$form->toArray(){{/formParams.0.required}}{{^formParams.0.required}}$form ? $form->toArray() : []{{/formParams.0.required}}){{/formParams.0}}
        );

        return {{#responses.0.isListContainer}}{{^responses.0.primitiveType}}array_map(
            static fn (array $responseItem) => {{responses.0.baseType}}::fromArray(
                ArrayUtil::toCamelCasedKeys($responseItem, true)
            ),
            $response
        ){{/responses.0.primitiveType}}{{/responses.0.isListContainer}}{{^responses.0.isListContainer}}{{^responses.0.primitiveType}}{{responses.0.baseType}}::fromArray(ArrayUtil::toCamelCasedKeys($response, true)){{/responses.0.primitiveType}}{{/responses.0.isListContainer}}{{#responses.0.primitiveType}}$response{{/responses.0.primitiveType}};
    }
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}}
